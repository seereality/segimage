'''
Created on 28-Sep-2014

@author: swetha
'''

import cv2.cv as cv
 
if __name__ == '__main__':
    capture = cv.CaptureFromCAM(0)
    cv.NamedWindow("camera", 0) 
     
    while True:
        img = cv.QueryFrame(capture)
        cv.ShowImage("camera", img)
        if cv.WaitKey(33) == 27:
            break
        elif cv.WaitKey(33) == ord('c'):
            place = '/home/swetha/test_opencv.png'
            cv.SaveImage(place, img)
            print 'Captured :D'
            
    cv.DestroyAllWindows()
     
    
'''
To capture using videoCapture

'''

# import cv2
#  
# # Camera 0 is the integrated web cam on my netbook
# camera_port = 0
#  
# #Number of frames to throw away while the camera adjusts to light levels
# ramp_frames = 30
#  
# # Now we can initialize the camera capture object with the cv2.VideoCapture class.
# # All it needs is the index to a camera port.
# camera = cv2.VideoCapture(camera_port)
#  
# # Captures a single image from the camera and returns it in PIL format
# def get_image():
#     # read is the easiest way to get a full image out of a VideoCapture object.
#     retval, im = camera.read()
#     return im
#  
# # Ramp the camera - these frames will be discarded and are only used to allow v4l2
# # to adjust light levels, if necessary
# for i in xrange(ramp_frames):
#     temp = get_image()
# print("Taking image...")
# # Take the actual image we want to keep
# camera_capture = get_image()
# f = "/home/swetha/test_image.png"
# # A nice feature of the imwrite method is that it will automatically choose the
# # correct format based on the file extension you provide. Convenient!
# cv2.imwrite(f, camera_capture)
# 
# print 'Done :D'
#  
# # You'll want to release the camera, otherwise you won't be able to create a new
# # capture object until your script exits
# del(camera)